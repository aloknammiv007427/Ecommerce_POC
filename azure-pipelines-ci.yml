trigger:
  branches:
    include:
      - main         # Trigger the pipeline when changes are pushed to the main branch
      - release/*    # Trigger for release branches

pool:
  vmImage: 'windows-latest' # Use a Windows-based image for building .NET applications

variables:
  buildConfiguration: 'Release'          # Define the build configuration
  imageName: 'ecommerce-dotnet-app'      # Define the Docker image name
  acrName: '<your-acr-name>'             # Replace with your ACR name

stages:
- stage: Build
  displayName: Build and Push Docker Image
  jobs:
  - job: BuildAndTest
    displayName: Build, Test, and Push to ACR
    steps:
    - task: UseDotNet@2
      displayName: Install .NET SDK
      inputs:
        packageType: 'sdk'
        version: '6.0.x'                 # Specify the .NET SDK version

    - task: DotNetCoreCLI@2
      displayName: Restore Dependencies
      inputs:
        command: 'restore'              # Restore NuGet packages
        projects: '**/*.csproj'         # Look for all .csproj files

    - task: DotNetCoreCLI@2
      displayName: Build Application
      inputs:
        command: 'build'                # Build the application
        arguments: '--configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: Run Unit Tests
      inputs:
        command: 'test'                 # Run unit tests
        projects: '**/*.csproj'

    - task: SonarCloudPrepare@1
      displayName: SonarQube: Prepare Analysis
      inputs:
        SonarCloud: '<your-sonarqube-service-connection>'
        organization: '<your-sonar-organization>'
        projectKey: '<your-sonar-project-key>'
        projectName: 'EcommerceApplication'

    - task: SonarCloudAnalyze@1
      displayName: SonarQube: Perform Analysis

    - task: SonarCloudPublish@1
      displayName: SonarQube: Publish Results

    - task: Docker@2
      displayName: Build and Push Docker Image
      inputs:
        command: 'buildAndPush'         # Combine build and push steps
        containerRegistry: '<your-acr-service-connection>'
        repository: '$(imageName)'
        dockerfile: '**/Dockerfile'     # Specify the Dockerfile path
        tags: |
          $(Build.BuildId)              # Tag the image with the build ID
